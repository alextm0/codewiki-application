"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hast-util-from-html";
exports.ids = ["vendor-chunks/hast-util-from-html"];
exports.modules = {

/***/ "(ssr)/./node_modules/hast-util-from-html/lib/errors.js":
/*!********************************************************!*\
  !*** ./node_modules/hast-util-from-html/lib/errors.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errors: () => (/* binding */ errors)\n/* harmony export */ });\n/**\n * @typedef ErrorInfo\n *   Info on a `parse5` error.\n * @property {string} reason\n *   Reason of error.\n * @property {string} description\n *   More info on error.\n * @property {false} [url]\n *   Turn off if this is not documented in the html5 spec (optional).\n */ const errors = {\n    /** @type {ErrorInfo} */ abandonedHeadElementChild: {\n        reason: \"Unexpected metadata element after head\",\n        description: \"Unexpected element after head. Expected the element before `</head>`\",\n        url: false\n    },\n    /** @type {ErrorInfo} */ abruptClosingOfEmptyComment: {\n        reason: \"Unexpected abruptly closed empty comment\",\n        description: \"Unexpected `>` or `->`. Expected `-->` to close comments\"\n    },\n    /** @type {ErrorInfo} */ abruptDoctypePublicIdentifier: {\n        reason: \"Unexpected abruptly closed public identifier\",\n        description: \"Unexpected `>`. Expected a closing `\\\"` or `'` after the public identifier\"\n    },\n    /** @type {ErrorInfo} */ abruptDoctypeSystemIdentifier: {\n        reason: \"Unexpected abruptly closed system identifier\",\n        description: \"Unexpected `>`. Expected a closing `\\\"` or `'` after the identifier identifier\"\n    },\n    /** @type {ErrorInfo} */ absenceOfDigitsInNumericCharacterReference: {\n        reason: \"Unexpected non-digit at start of numeric character reference\",\n        description: \"Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references\"\n    },\n    /** @type {ErrorInfo} */ cdataInHtmlContent: {\n        reason: \"Unexpected CDATA section in HTML\",\n        description: \"Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead\"\n    },\n    /** @type {ErrorInfo} */ characterReferenceOutsideUnicodeRange: {\n        reason: \"Unexpected too big numeric character reference\",\n        description: \"Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)\"\n    },\n    /** @type {ErrorInfo} */ closingOfElementWithOpenChildElements: {\n        reason: \"Unexpected closing tag with open child elements\",\n        description: \"Unexpectedly closing tag. Expected other tags to be closed first\",\n        url: false\n    },\n    /** @type {ErrorInfo} */ controlCharacterInInputStream: {\n        reason: \"Unexpected control character\",\n        description: \"Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace\"\n    },\n    /** @type {ErrorInfo} */ controlCharacterReference: {\n        reason: \"Unexpected control character reference\",\n        description: \"Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace\"\n    },\n    /** @type {ErrorInfo} */ disallowedContentInNoscriptInHead: {\n        reason: \"Disallowed content inside `<noscript>` in `<head>`\",\n        description: \"Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`\",\n        url: false\n    },\n    /** @type {ErrorInfo} */ duplicateAttribute: {\n        reason: \"Unexpected duplicate attribute\",\n        description: \"Unexpectedly double attribute. Expected attributes to occur only once\"\n    },\n    /** @type {ErrorInfo} */ endTagWithAttributes: {\n        reason: \"Unexpected attribute on closing tag\",\n        description: \"Unexpected attribute. Expected `>` instead\"\n    },\n    /** @type {ErrorInfo} */ endTagWithTrailingSolidus: {\n        reason: \"Unexpected slash at end of closing tag\",\n        description: \"Unexpected `%c-1`. Expected `>` instead\"\n    },\n    /** @type {ErrorInfo} */ endTagWithoutMatchingOpenElement: {\n        reason: \"Unexpected unopened end tag\",\n        description: \"Unexpected end tag. Expected no end tag or another end tag\",\n        url: false\n    },\n    /** @type {ErrorInfo} */ eofBeforeTagName: {\n        reason: \"Unexpected end of file\",\n        description: \"Unexpected end of file. Expected tag name instead\"\n    },\n    /** @type {ErrorInfo} */ eofInCdata: {\n        reason: \"Unexpected end of file in CDATA\",\n        description: \"Unexpected end of file. Expected `]]>` to close the CDATA\"\n    },\n    /** @type {ErrorInfo} */ eofInComment: {\n        reason: \"Unexpected end of file in comment\",\n        description: \"Unexpected end of file. Expected `-->` to close the comment\"\n    },\n    /** @type {ErrorInfo} */ eofInDoctype: {\n        reason: \"Unexpected end of file in doctype\",\n        description: \"Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)\"\n    },\n    /** @type {ErrorInfo} */ eofInElementThatCanContainOnlyText: {\n        reason: \"Unexpected end of file in element that can only contain text\",\n        description: \"Unexpected end of file. Expected text or a closing tag\",\n        url: false\n    },\n    /** @type {ErrorInfo} */ eofInScriptHtmlCommentLikeText: {\n        reason: \"Unexpected end of file in comment inside script\",\n        description: \"Unexpected end of file. Expected `-->` to close the comment\"\n    },\n    /** @type {ErrorInfo} */ eofInTag: {\n        reason: \"Unexpected end of file in tag\",\n        description: \"Unexpected end of file. Expected `>` to close the tag\"\n    },\n    /** @type {ErrorInfo} */ incorrectlyClosedComment: {\n        reason: \"Incorrectly closed comment\",\n        description: \"Unexpected `%c-1`. Expected `-->` to close the comment\"\n    },\n    /** @type {ErrorInfo} */ incorrectlyOpenedComment: {\n        reason: \"Incorrectly opened comment\",\n        description: \"Unexpected `%c`. Expected `<!--` to open the comment\"\n    },\n    /** @type {ErrorInfo} */ invalidCharacterSequenceAfterDoctypeName: {\n        reason: \"Invalid sequence after doctype name\",\n        description: \"Unexpected sequence at `%c`. Expected `public` or `system`\"\n    },\n    /** @type {ErrorInfo} */ invalidFirstCharacterOfTagName: {\n        reason: \"Invalid first character in tag name\",\n        description: \"Unexpected `%c`. Expected an ASCII letter instead\"\n    },\n    /** @type {ErrorInfo} */ misplacedDoctype: {\n        reason: \"Misplaced doctype\",\n        description: \"Unexpected doctype. Expected doctype before head\",\n        url: false\n    },\n    /** @type {ErrorInfo} */ misplacedStartTagForHeadElement: {\n        reason: \"Misplaced `<head>` start tag\",\n        description: \"Unexpected start tag `<head>`. Expected `<head>` directly after doctype\",\n        url: false\n    },\n    /** @type {ErrorInfo} */ missingAttributeValue: {\n        reason: \"Missing attribute value\",\n        description: \"Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead\"\n    },\n    /** @type {ErrorInfo} */ missingDoctype: {\n        reason: \"Missing doctype before other content\",\n        description: \"Expected a `<!doctype html>` before anything else\",\n        url: false\n    },\n    /** @type {ErrorInfo} */ missingDoctypeName: {\n        reason: \"Missing doctype name\",\n        description: \"Unexpected doctype end at `%c`. Expected `html` instead\"\n    },\n    /** @type {ErrorInfo} */ missingDoctypePublicIdentifier: {\n        reason: \"Missing public identifier in doctype\",\n        description: \"Unexpected `%c`. Expected identifier for `public` instead\"\n    },\n    /** @type {ErrorInfo} */ missingDoctypeSystemIdentifier: {\n        reason: \"Missing system identifier in doctype\",\n        description: 'Unexpected `%c`. Expected identifier for `system` instead (suggested: `\"about:legacy-compat\"`)'\n    },\n    /** @type {ErrorInfo} */ missingEndTagName: {\n        reason: \"Missing name in end tag\",\n        description: \"Unexpected `%c`. Expected an ASCII letter instead\"\n    },\n    /** @type {ErrorInfo} */ missingQuoteBeforeDoctypePublicIdentifier: {\n        reason: \"Missing quote before public identifier in doctype\",\n        description: \"Unexpected `%c`. Expected `\\\"` or `'` instead\"\n    },\n    /** @type {ErrorInfo} */ missingQuoteBeforeDoctypeSystemIdentifier: {\n        reason: \"Missing quote before system identifier in doctype\",\n        description: \"Unexpected `%c`. Expected `\\\"` or `'` instead\"\n    },\n    /** @type {ErrorInfo} */ missingSemicolonAfterCharacterReference: {\n        reason: \"Missing semicolon after character reference\",\n        description: \"Unexpected `%c`. Expected `;` instead\"\n    },\n    /** @type {ErrorInfo} */ missingWhitespaceAfterDoctypePublicKeyword: {\n        reason: \"Missing whitespace after public identifier in doctype\",\n        description: \"Unexpected `%c`. Expected ASCII whitespace instead\"\n    },\n    /** @type {ErrorInfo} */ missingWhitespaceAfterDoctypeSystemKeyword: {\n        reason: \"Missing whitespace after system identifier in doctype\",\n        description: \"Unexpected `%c`. Expected ASCII whitespace instead\"\n    },\n    /** @type {ErrorInfo} */ missingWhitespaceBeforeDoctypeName: {\n        reason: \"Missing whitespace before doctype name\",\n        description: \"Unexpected `%c`. Expected ASCII whitespace instead\"\n    },\n    /** @type {ErrorInfo} */ missingWhitespaceBetweenAttributes: {\n        reason: \"Missing whitespace between attributes\",\n        description: \"Unexpected `%c`. Expected ASCII whitespace instead\"\n    },\n    /** @type {ErrorInfo} */ missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {\n        reason: \"Missing whitespace between public and system identifiers in doctype\",\n        description: \"Unexpected `%c`. Expected ASCII whitespace instead\"\n    },\n    /** @type {ErrorInfo} */ nestedComment: {\n        reason: \"Unexpected nested comment\",\n        description: \"Unexpected `<!--`. Expected `-->`\"\n    },\n    /** @type {ErrorInfo} */ nestedNoscriptInHead: {\n        reason: \"Unexpected nested `<noscript>` in `<head>`\",\n        description: \"Unexpected `<noscript>`. Expected a closing tag or a meta element\",\n        url: false\n    },\n    /** @type {ErrorInfo} */ nonConformingDoctype: {\n        reason: \"Unexpected non-conforming doctype declaration\",\n        description: 'Expected `<!doctype html>` or `<!doctype html system \"about:legacy-compat\">`',\n        url: false\n    },\n    /** @type {ErrorInfo} */ nonVoidHtmlElementStartTagWithTrailingSolidus: {\n        reason: \"Unexpected trailing slash on start tag of non-void element\",\n        description: \"Unexpected `/`. Expected `>` instead\"\n    },\n    /** @type {ErrorInfo} */ noncharacterCharacterReference: {\n        reason: \"Unexpected noncharacter code point referenced by character reference\",\n        description: \"Unexpected code point. Do not use noncharacters in HTML\"\n    },\n    /** @type {ErrorInfo} */ noncharacterInInputStream: {\n        reason: \"Unexpected noncharacter character\",\n        description: \"Unexpected code point `%x`. Do not use noncharacters in HTML\"\n    },\n    /** @type {ErrorInfo} */ nullCharacterReference: {\n        reason: \"Unexpected NULL character referenced by character reference\",\n        description: \"Unexpected code point. Do not use NULL characters in HTML\"\n    },\n    /** @type {ErrorInfo} */ openElementsLeftAfterEof: {\n        reason: \"Unexpected end of file\",\n        description: \"Unexpected end of file. Expected closing tag instead\",\n        url: false\n    },\n    /** @type {ErrorInfo} */ surrogateCharacterReference: {\n        reason: \"Unexpected surrogate character referenced by character reference\",\n        description: \"Unexpected code point. Do not use lone surrogate characters in HTML\"\n    },\n    /** @type {ErrorInfo} */ surrogateInInputStream: {\n        reason: \"Unexpected surrogate character\",\n        description: \"Unexpected code point `%x`. Do not use lone surrogate characters in HTML\"\n    },\n    /** @type {ErrorInfo} */ unexpectedCharacterAfterDoctypeSystemIdentifier: {\n        reason: \"Invalid character after system identifier in doctype\",\n        description: \"Unexpected character at `%c`. Expected `>`\"\n    },\n    /** @type {ErrorInfo} */ unexpectedCharacterInAttributeName: {\n        reason: \"Unexpected character in attribute name\",\n        description: \"Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter\"\n    },\n    /** @type {ErrorInfo} */ unexpectedCharacterInUnquotedAttributeValue: {\n        reason: \"Unexpected character in unquoted attribute value\",\n        description: \"Unexpected `%c`. Quote the attribute value to include it\"\n    },\n    /** @type {ErrorInfo} */ unexpectedEqualsSignBeforeAttributeName: {\n        reason: \"Unexpected equals sign before attribute name\",\n        description: \"Unexpected `%c`. Add an attribute name before it\"\n    },\n    /** @type {ErrorInfo} */ unexpectedNullCharacter: {\n        reason: \"Unexpected NULL character\",\n        description: \"Unexpected code point `%x`. Do not use NULL characters in HTML\"\n    },\n    /** @type {ErrorInfo} */ unexpectedQuestionMarkInsteadOfTagName: {\n        reason: \"Unexpected question mark instead of tag name\",\n        description: \"Unexpected `%c`. Expected an ASCII letter instead\"\n    },\n    /** @type {ErrorInfo} */ unexpectedSolidusInTag: {\n        reason: \"Unexpected slash in tag\",\n        description: \"Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value\"\n    },\n    /** @type {ErrorInfo} */ unknownNamedCharacterReference: {\n        reason: \"Unexpected unknown named character reference\",\n        description: \"Unexpected character reference. Expected known named character references\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hast-util-from-html/lib/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hast-util-from-html/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/hast-util-from-html/lib/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromHtml: () => (/* binding */ fromHtml)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var hast_util_from_parse5__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hast-util-from-parse5 */ \"(ssr)/./node_modules/hast-util-from-parse5/lib/index.js\");\n/* harmony import */ var parse5__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! parse5 */ \"(ssr)/./node_modules/parse5/dist/index.js\");\n/* harmony import */ var vfile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vfile */ \"(ssr)/./node_modules/vfile/lib/index.js\");\n/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vfile-message */ \"(ssr)/./node_modules/vfile-message/lib/index.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/hast-util-from-html/lib/errors.js\");\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('parse5').ParserError} ParserError\n * @typedef {import('vfile').Value} Value\n */ /**\n * @typedef {keyof errors} ErrorCode\n *   Known names of parse errors.\n *\n * @typedef {Partial<Record<ErrorCode, ErrorSeverity | null | undefined>>} ErrorOptions\n *   Options that define the severity of errors.\n *\n * @typedef {boolean | 0 | 1 | 2} ErrorSeverity\n *   Error severity:\n *\n *   * `0` or `false`\n *     — turn the parse error off\n *   * `1` or `true`\n *     — turn the parse error into a warning\n *   * `2`\n *     — turn the parse error into an actual error: processing stops.\n *\n * @typedef ExtraOptions\n *   Options that define how to parse HTML.\n * @property {boolean | null | undefined} [fragment=false]\n *   Specify whether to parse a fragment, instead of a complete document\n *   (default: `false`).\n *\n *   In document mode, unopened `html`, `head`, and `body` elements are opened\n *   in just the right places.\n * @property {OnError | null | undefined} [onerror]\n *   Call `onerror` with parse errors while parsing (optional).\n *\n *   > 👉 **Note**: parse errors are currently being added to HTML.\n *   > Not all errors emitted by parse5 (or us) are specced yet.\n *   > Some documentation may still be missing.\n *\n *   Specific rules can be turned off by setting them to `false` (or `0`).\n *   The default, when `emitParseErrors: true`, is `true` (or `1`), and means\n *   that rules emit as warnings.\n *   Rules can also be configured with `2`, to turn them into fatal errors.\n *\n * @typedef {Omit<import('hast-util-from-parse5').Options, 'file'>} FromParse5Options\n *   Options that can be passed through to `hast-util-from-parse5`.\n *\n * @callback OnError\n *   Handle parse errors.\n * @param {VFileMessage} error\n *   Message.\n * @returns {undefined | void}\n *   Nothing.\n *\n *   Note: `void` included until TS infers `undefined` nicely.\n *\n * @typedef {FromParse5Options & ErrorOptions & ExtraOptions} Options\n *   Configuration.\n */ \n\n\n\n\n\nconst base = \"https://html.spec.whatwg.org/multipage/parsing.html#parse-error-\";\nconst dashToCamelRe = /-[a-z]/g;\nconst formatCRe = /%c(?:([-+])(\\d+))?/g;\nconst formatXRe = /%x/g;\nconst fatalities = {\n    2: true,\n    1: false,\n    0: null\n};\n/** @type {Readonly<Options>} */ const emptyOptions = {};\n/**\n * Turn serialized HTML into a hast tree.\n *\n * @param {VFile | Value} value\n *   Serialized HTML to parse.\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Root}\n *   Tree.\n */ function fromHtml(value, options) {\n    const settings = options || emptyOptions;\n    const onerror = settings.onerror;\n    const file = value instanceof vfile__WEBPACK_IMPORTED_MODULE_1__.VFile ? value : new vfile__WEBPACK_IMPORTED_MODULE_1__.VFile(value);\n    const fn = settings.fragment ? parse5__WEBPACK_IMPORTED_MODULE_0__.parseFragment : parse5__WEBPACK_IMPORTED_MODULE_0__.parse;\n    const doc = String(file);\n    const p5doc = fn(doc, {\n        sourceCodeLocationInfo: true,\n        // Note `parse5` types currently do not allow `undefined`.\n        onParseError: settings.onerror ? internalOnerror : null,\n        scriptingEnabled: false\n    });\n    // `parse5` returns document which are always mapped to roots.\n    return /** @type {Root} */ (0,hast_util_from_parse5__WEBPACK_IMPORTED_MODULE_2__.fromParse5)(p5doc, {\n        file,\n        space: settings.space,\n        verbose: settings.verbose\n    });\n    /**\n   * Handle a parse error.\n   *\n   * @param {ParserError} error\n   *   Parse5 error.\n   * @returns {undefined}\n   *   Nothing.\n   */ function internalOnerror(error) {\n        const code = error.code;\n        const name = camelcase(code);\n        const setting = settings[name];\n        const config = setting === null || setting === undefined ? true : setting;\n        const level = typeof config === \"number\" ? config : config ? 1 : 0;\n        if (level) {\n            const info = _errors_js__WEBPACK_IMPORTED_MODULE_3__.errors[name];\n            (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(info, \"expected known error from `parse5`\");\n            const message = new vfile_message__WEBPACK_IMPORTED_MODULE_5__.VFileMessage(format(info.reason), {\n                place: {\n                    start: {\n                        line: error.startLine,\n                        column: error.startCol,\n                        offset: error.startOffset\n                    },\n                    end: {\n                        line: error.endLine,\n                        column: error.endCol,\n                        offset: error.endOffset\n                    }\n                },\n                ruleId: code,\n                source: \"hast-util-from-html\"\n            });\n            if (file.path) {\n                message.file = file.path;\n                message.name = file.path + \":\" + message.name;\n            }\n            message.fatal = fatalities[level];\n            message.note = format(info.description);\n            message.url = info.url === false ? undefined : base + code;\n            (0,devlop__WEBPACK_IMPORTED_MODULE_4__.ok)(onerror, \"`internalOnerror` is not passed if `onerror` is not set\");\n            onerror(message);\n        }\n        /**\n     * Format a human readable string about an error.\n     *\n     * @param {string} value\n     *   Value to format.\n     * @returns {string}\n     *   Formatted.\n     */ function format(value) {\n            return value.replace(formatCRe, formatC).replace(formatXRe, formatX);\n            /**\n       * Format the character.\n       *\n       * @param {string} _\n       *   Match.\n       * @param {string} $1\n       *   Sign (`-` or `+`, optional).\n       * @param {string} $2\n       *   Offset.\n       * @returns {string}\n       *   Formatted.\n       */ function formatC(_, $1, $2) {\n                const offset = ($2 ? Number.parseInt($2, 10) : 0) * ($1 === \"-\" ? -1 : 1);\n                const char = doc.charAt(error.startOffset + offset);\n                return visualizeCharacter(char);\n            }\n            /**\n       * Format the character code.\n       *\n       * @returns {string}\n       *   Formatted.\n       */ function formatX() {\n                return visualizeCharacterCode(doc.charCodeAt(error.startOffset));\n            }\n        }\n    }\n}\n/**\n * @param {string} value\n *   Error code in dash case.\n * @returns {ErrorCode}\n *   Error code in camelcase.\n */ function camelcase(value) {\n    // This should match an error code.\n    return /** @type {ErrorCode} */ value.replace(dashToCamelRe, dashToCamel);\n}\n/**\n * @param {string} $0\n *   Match.\n * @returns {string}\n *   Camelcased.\n */ function dashToCamel($0) {\n    return $0.charAt(1).toUpperCase();\n}\n/**\n * @param {string} char\n *   Character.\n * @returns {string}\n *   Formatted.\n */ function visualizeCharacter(char) {\n    return char === \"`\" ? \"` ` `\" : char;\n}\n/**\n * @param {number} charCode\n *   Character code.\n * @returns {string}\n *   Formatted.\n */ function visualizeCharacterCode(charCode) {\n    return \"0x\" + charCode.toString(16).toUpperCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hast-util-from-html/lib/index.js\n");

/***/ })

};
;